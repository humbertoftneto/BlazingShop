@page "/products/edit/{id:int}"
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context
@inject  NavigationManager _navigationManager

<h3>@_model?.Title</h3>

<EditForm Model="_model" OnValidSubmit="@HandleSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <InputText class="form-control" type="text" id="Title" @bind-Value="_model.Title"/>
    </div>
    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <InputNumber class="form-control" type="text" id="Price" @bind-Value="_model.Price"/>
    </div>
    <div class="mb-3">
        <label for="CategoryId" class="form-label">Category</label>
        <InputSelect id="CategoryId" @bind-Value="_model.CategoryId" class="form-control">
            @foreach (var category in _categories)
            {
                <option value="@category.Id">
                    @category.Title
                </option>
            }
        </InputSelect>
    </div>
    
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @_errorMessage
        </div>
    }

    <button class="btn btn-success" type="submit">Save</button>
</EditForm>

@code
{
    [Parameter]
    public int Id { get; set; }
    
    private Product? _model = new();
    List<Category> _categories = new();
    string? _errorMessage = null;
    
    protected override async Task OnInitializedAsync()
    {
        _categories = await _context.Categories.AsNoTracking().OrderBy(x => x.Title).ToListAsync();
        _model = await _context.Products.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);
    }

    async Task HandleSubmitAsync()
    {
        try
        {
            var prod = await _context.Products.FirstOrDefaultAsync(x => x.Id == Id);
            if (prod is null)
                throw new Exception("Produto n√£o encontrado");

            prod.Title = _model.Title;
            prod.Price = _model.Price;
            prod.CategoryId = _model.CategoryId;

            _context.Products.Update(prod);
            await _context.SaveChangesAsync();
            
            _navigationManager.NavigateTo("/products");
        }
        catch
        {
            _errorMessage = "Falha ao persistir os dados";
        }
    }
}